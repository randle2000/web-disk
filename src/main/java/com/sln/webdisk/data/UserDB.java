package com.sln.webdisk.data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.sln.webdisk.business.User;

/**
* This class contains static methods for work with database
* Works with tables <strong>users</strong> and <strong>userrole</strong>
* It uses static ConnectionPool to get DataSource
*  
* @author  Sln
* @version 1.0
* @see ConnectionPool 
*/
public class UserDB {
	
    /**
     * Inserts {@code User} object in database and Returns last generated auto-increment ID, or -1.
     * It will also insert entry in <strong>userrole</strong> table
     * 
     * @param user
     * 		User object to be inserted
     * @return The last userId generated by database during insert
     */
	
	// returns userId
	public static long insert(User user) {
		long userId = -1;
		
        // Update table users
        String query1 = "INSERT INTO users (Email, Password, RealName) VALUES (?, ?, ?)";
        PreparedStatementSetter pss1 = (ps) -> { 
            ps.setString(1, user.getEmail()); 
            ps.setString(2, user.getPassword()); 
            ps.setString(3, user.getRealName());
        };
        
        try (Connection connection = ConnectionPool.getInstance().getConnection();
        		PreparedStatement ps1 = DBUtil.createPreparedStatement(connection, query1, pss1)) {
        	connection.setAutoCommit(false);
            ps1.executeUpdate();
            // Get last generated auto-increment ID
            final long lastId = DBUtil.getAutoGeneratedId(ps1);
            userId = lastId;
            
            // Update table userrole
            String query2 = "INSERT INTO userrole (UserID, RoleName, Email) VALUES (?, ?, ?)";
            PreparedStatementSetter pss2 = (ps) -> { 
                ps.setLong(1, lastId); 
                ps.setString(2, "user"); 
                ps.setString(3, user.getEmail()); 
            };
            try (PreparedStatement ps2 = DBUtil.createPreparedStatement(connection, query2, pss2)) {
            	ps2.executeUpdate();
                connection.commit();
            } catch (SQLException e) {
            	connection.rollback();
                System.err.println(e);
            }
        } catch (SQLException e) {
            System.err.println(e);
            userId = -1;
        }
        return userId;
	}
	
	public static boolean emailExists(String email) {
        String query = "SELECT Email FROM users WHERE Email = ?";
        PreparedStatementSetter pss = (ps) -> ps.setString(1, email); 
        try (Connection connection = ConnectionPool.getInstance().getConnection();
        		PreparedStatement ps = DBUtil.createPreparedStatement(connection, query, pss);
        		ResultSet rs = ps.executeQuery()) {
            return rs.next();
        } catch (SQLException e) {
            System.err.println(e);
            return false;
        }
	}
	
	public static User selectUser(String email) {
        String query = "SELECT * FROM users WHERE Email = ?";
        PreparedStatementSetter pss = (ps) -> ps.setString(1, email); 
        try (Connection connection = ConnectionPool.getInstance().getConnection();
        		PreparedStatement ps = DBUtil.createPreparedStatement(connection, query, pss);
        		ResultSet rs = ps.executeQuery()) {
            User user = null;
            if (rs.next()) {
                user = new User();
                user.setUserId(rs.getLong("UserID"));
                user.setRealName(rs.getString("RealName"));
                user.setEmail(rs.getString("Email"));
                user.setPassword(rs.getString("Password"));
            }
            return user;
        } catch (SQLException e) {
            System.err.println(e);
            return null;
        } 
	}
}

package com.sln.webdisk.data;

import java.sql.*;

interface PreparedStatementSetter {
    void setValues(PreparedStatement ps) throws SQLException;
}

/**
* This just utility class.
* It contains static helper methods to work with Statement  
*  
* @author  Sln
* @version 1.0
*/
public class DBUtil {

    public static void closeStatement(Statement s) {
        try {
            if (s != null) {
                s.close();
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
    }

    public static void closePreparedStatement(Statement ps) {
        try {
            if (ps != null) {
                ps.close();
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
    }

    public static void closeResultSet(ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
    }
    
    /**
     * Returns last generated auto-increment ID, or -1
     * by sln, taken from here: https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-last-insert-id.html
     * 
     * @param ps 
     * 		A PreparedStatement object that was used to insert data in DB
     * @return The ID of the row that was inserted using passed PreparedStatement object 
     */
    public static long getAutoGeneratedId(PreparedStatement ps) {
        long lastId = -1;
        try (ResultSet rs = ps.getGeneratedKeys()) {
	        if (rs.next()) {
	            lastId = rs.getLong(1);
	        }
        } catch (SQLException e) {
        	System.err.println(e);
        }
    	return lastId;
    }
    
	public static PreparedStatement createPreparedStatement(Connection connection, String sql, PreparedStatementSetter setter) throws SQLException {
	    PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
	    setter.setValues(ps);
	    return ps;
	}
	
//	public static PreparedStatement createPreparedStatement(Connection con, String sql, Map<Integer, String> params) throws SQLException {
//	    PreparedStatement ps = con.prepareStatement(sql);
//	    for (Map.Entry<Integer, String> p : params.entrySet()) {
//	    	ps.setString(p.getKey(), p.getValue());
//	    }
//	    return ps;
//	}
    
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sln</groupId>
	<artifactId>MyWebdisk</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>MyWebdisk Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<jdk.version>1.8</jdk.version>
		<junit.version>4.11</junit.version>
		<jstl.version>1.2</jstl.version>
		<powermock.version>1.7.0RC2</powermock.version>
	</properties>


	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.7.6</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito2</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4-rule</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-classloading-xstream</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- 
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId> 
			<version>9.4.1208</version>
		</dependency>
		-->
	</dependencies>
	
	<build>
		<finalName>MyWebdisk</finalName>

		<plugins>
			<!-- Eclipse project -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<!-- Always download and attach dependencies source code -->
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 -->
					<wtpversion>2.0</wtpversion>
				</configuration>
			</plugin>

			<!-- Set JDK Compiler Level -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>
			
			<!--
			by sln: want to include javadoc into .war file
			The trick is to configure maven-javadoc-plugin to generate javadoc in a phase happening before the package (e.g. prepare-package)
			and then include the generated javadic into the webapp configuring maven-war-plugin properly.
			if not the javadoc, this maven-war-plugin would not be necessary here
			-->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
				<version>3.0.0</version>
                <configuration>
                    <webResources>
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>${project.build.directory}/apidocs</directory>
                            <targetPath>doc</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
			
            <!-- Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.4</version>
				<!-- by sln: the following will generate javadocs during prepare-package phase -->
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				
                <configuration>
                    <stylesheetfile>${basedir}/src/main/javadoc/stylesheet.css</stylesheetfile>
					<!-- By default, the Javadoc Plugin includes the ${basedir}/src/main/javadoc/overview.html if it exists. -->
					<!--<overview>${basedir}/src/main/javadoc/overview.html</overview>-->
					<docfilessubdirs>true</docfilessubdirs>
					<outputDirectory>${basedir}/target/apidocs</outputDirectory>
					<!--<destDir>apidocs</destDir>-->
                    <show>protected</show>
                    <author>false</author>
                    <version>false</version>
                    <detectLinks>false</detectLinks>
                    <linksource>true</linksource>
                    <keywords>true</keywords>
                    <use>true</use>
                    <windowtitle>WebDisk</windowtitle>
                    <encoding>UTF-8</encoding>
                    <locale>en</locale>
                    <javadocVersion>${jdkVersion}</javadocVersion>
                    <javaApiLinks>
                        <property>
                            <name>api_${jdkVersion}</name>
                            <value>http://docs.oracle.com/javase/${jdkVersion}.0/docs/api/</value>
                        </property>
                    </javaApiLinks>
                    <!--<excludePackageNames>com.sln.*</excludePackageNames>-->
                    <verbose>true</verbose>
                    <minmemory>32m</minmemory>
                    <maxmemory>128m</maxmemory>
                    <failOnError>true</failOnError>
					<!--
                    <includeDependencySources>true</includeDependencySources>
                    <dependencySourceIncludes>
                        <dependencySourceInclude>org.hamcrest:hamcrest-core:*</dependencySourceInclude>
                    </dependencySourceIncludes>
					-->
                </configuration>
            </plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.github.jsimone</groupId>
									<artifactId>webapp-runner</artifactId>
									<version>8.5.11.2</version>
									<destFileName>webapp-runner.jar</destFileName>
								</artifactItem>
								<!-- The following will put file tomcat-dbcp-8.0.33.jar into target/dependency 
									This is not needed when deploying to Tomcat, but for webapp-runner, otherwise 
									webapp-runner will not be able to initialize datasource from META-INF/context.xml -->
								<artifactItem>
									<groupId>org.apache.tomcat</groupId>
									<artifactId>tomcat-dbcp</artifactId>
									<version>8.0.33</version>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>com.heroku.sdk</groupId>
				<artifactId>heroku-maven-plugin</artifactId>
				<version>1.1.3</version>
				<configuration>
					<appName>slndisk</appName>
					<!-- <configVars> <WEBAPP_RUNNER_OPTS> --><!--enable-naming</WEBAPP_RUNNER_OPTS> </configVars> -->
					<!-- you can either create file Procfile in project root and place this 
						line into it: web: java $JAVA_OPTS ..... OR use the tag below. It seems that 
						this tag takes preference over Procfile if both are present -->
					<processTypes>
						<!--<web>java $JAVA_OPTS -cp 'target/dependency/*' webapp.runner.launch.Main target/*.war - -enable-naming - -port $PORT - -path /MyWebdisk</web>-->
						<web>java $JAVA_OPTS -cp 'target/dependency/*' webapp.runner.launch.Main target/*.war --enable-naming --port $PORT</web>
					</processTypes>
				</configuration>
			</plugin>

		</plugins>
	</build>
</project>
